apply plugin: 'maven'
apply plugin: 'signing'

version = VERSION_NAME
group = GROUP_ID

def isReleaseBuild() {
    return VERSION_NAME.contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
    return " https://repo.rdc.aliyun.com/repository/46895-release-0vMuPn"
}

def getSnapshotRepositoryUrl() {

    return "https://repo.rdc.aliyun.com/repository/46895-snapshot-jKpBUU"
}

def getRepositoryUsername() {
    return "tDngW5"
}

def getRepositoryPassword() {
    return "hJqX0j0yfu"
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                pom.groupId = GROUP_ID
                pom.artifactId = ARTIFACT_ID
                pom.version = VERSION_NAME

                repository(url: getReleaseRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }
                snapshotRepository(url: getSnapshotRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }

                pom.project {
                    name POM_NAME
                    packaging POM_PACKAGING
                    description POM_DESCRIPTION
                    url POM_URL
                }
            }
        }
    }

    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    if (project.getPlugins().hasPlugin('com.android.application') ||
            project.getPlugins().hasPlugin('com.android.library')) {
        task installMaven(type: Upload, dependsOn: assemble) {
            repositories.mavenInstaller {
                configuration = configurations.archives

                pom.groupId = GROUP_ID
                pom.artifactId = ARTIFACT_ID
                pom.version = VERSION_NAME

                pom.project {
                    name POM_NAME
                    packaging POM_PACKAGING
                    description POM_DESCRIPTION
                    url POM_URL

                }
            }
        }

//        task androidJavadocs(type: Javadoc) {
//            source = android.sourceSets.main.java.source
//            classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//        }
//
//        task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
//            classifier = 'javadoc'
//            from androidJavadocs.destinationDir
//        }

        task androidSourcesJar(type: Jar) {
            classifier = 'sources'
            from android.sourceSets.main.java.source
        }
    } else {
        installMaven {
            repositories.mavenInstaller {
                pom.groupId = GROUP_ID
                pom.artifactId = ARTIFACT_ID
                pom.version = VERSION_NAME

                pom.project {
                    name POM_NAME
                    packaging POM_PACKAGING
                    description POM_DESCRIPTION
                    url POM_URL
                }
            }
        }

        task sourcesJar(type: Jar, dependsOn:classes) {
            classifier = 'sources'
            from sourceSets.main.allSource
        }

//        task javadocJar(type: Jar, dependsOn:javadoc) {
//            classifier = 'javadoc'
//            from javadoc.destinationDir
//        }
    }

    if (JavaVersion.current().isJava8Compatible()) {
        allprojects {
            tasks.withType(Javadoc) {
                options.addStringOption('Xdoclint:none', '-quiet')
            }
        }
    }

    artifacts {
        if (project.getPlugins().hasPlugin('com.android.application') ||
                project.getPlugins().hasPlugin('com.android.library')) {
            archives androidSourcesJar
//            archives androidJavadocsJar
        } else {
            archives sourcesJar
//            archives javadocJar
        }
    }
}